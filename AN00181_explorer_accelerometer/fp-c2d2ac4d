#include <platform.h>
#include <xmos_flash.h>
#include <xclib.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdio.h>

flash_ports_t flash_ports_0 =
{
  PORT_SQI_CS,
  PORT_SQI_SCLK,
  PORT_SQI_SIO,
  on tile[0]: XS1_CLKBLK_5
};

flash_clock_config_t flash_clock_config = 
{
  flash_clock_xcore,
  8,
  8,
  flash_clock_input_edge_falling,
  flash_port_pad_delay_0,
};

flash_qe_config_t flash_qe_config_0 = 
{
  flash_qe_location_status_reg_0,
  flash_qe_bit_6
};

unsigned is_busy(flash_handle_t * flash_handle)
{
  unsigned char status;
  status = flash_read_status_register(flash_handle, flash_status_register_0);
  return (status & 0x1) == 1;
}

void wait_while_busy(flash_handle_t * flash_handle)
{
  timer tmr;
  unsigned int t;
  while(is_busy(flash_handle))
  {
    tmr :> t;
    tmr when timerafter(t+100) :> t;
  }
}

void enable_quad_mode(flash_handle_t * flash_handle, flash_qe_config_t & flash_qe_config)
{
  unsigned char quad_enable[2] = {0x00, 0x00};
  flash_num_status_bytes_t num_status_bytes;
  if(flash_qe_config.flash_qe_location == flash_qe_location_status_reg_0)
  {
    quad_enable[0] = (1 << flash_qe_config.flash_qe_shift);
    num_status_bytes = flash_num_status_bytes_1;
  }
  else
  {
    quad_enable[1] = (1 << flash_qe_config.flash_qe_shift);
    num_status_bytes = flash_num_status_bytes_2;
  }

  flash_write_enable(flash_handle);
  flash_write_status_register(flash_handle, quad_enable, num_status_bytes);
  wait_while_busy(flash_handle);
}

#define FILE_BUF_SIZE 16384
char file_buf[FILE_BUF_SIZE];

extern "C" {int setvbuf ( FILE * stream, char * buffer, int mode, size_t size );}
#undef feof
extern "C" {int feof ( FILE * stream );}

void sendProgress(chanend cProgress, unsigned int value)
{
  cProgress <: value;
}

void ackProgress(chanend cProgress)
{
  unsigned int dud;
  cProgress :> dud;
}

int readPage(unsigned int page_size, unsigned char* readBuffer, FILE * inFile )
{
  int lastPage = 0;
  int bytesRead = fread( readBuffer, 1, page_size, inFile );
  if( bytesRead == 0 )
  {
    return( 1 );
  }
  if( bytesRead < (page_size) )
  {
    lastPage = 1;
    while( bytesRead < (page_size) )
    {
      readBuffer[bytesRead++] = '0';
    }
  }
  int c = fgetc(inFile);
  lastPage |= feof(inFile);
  if( c != EOF )
  {
    ungetc(c,inFile);
  }
  return( lastPage );
}

int programAndCheckPage(flash_handle_t * flash_handle, unsigned int page_size, unsigned int pageAddress, unsigned char* readBuffer, unsigned char* checkBuffer )
{
  int i;
  flash_write_enable(flash_handle);
  flash_write_page(flash_handle, pageAddress, readBuffer, page_size);
  wait_while_busy(flash_handle);
  flash_read_fast(flash_handle, pageAddress, checkBuffer, page_size);
  int gotError = 0;
  for( i=0; i<page_size; i++ )
  {
    if( readBuffer[i] != checkBuffer[i] )
    {
      fprintf(stderr,"Verify failed for page 0x%08x, offset 0x%04x (read 0x%02x, expected 0x%02x).",pageAddress,i,checkBuffer[i],readBuffer[i]);
      gotError = 1;
    }
  }
  if( gotError )
  {
    exit(1);
  }
  return(0);
}

int DoProgram(flash_handle_t * flash_handle, unsigned int page_size, chanend cProgress, const char* dataFileName)
{
  FILE * movable inFile = NULL;
  unsigned char* readBuffer = NULL;
  unsigned char* checkBuffer = NULL;
  sendProgress(cProgress,1);
  ackProgress(cProgress);

  inFile = fopen(dataFileName, "rb");
  if(inFile == NULL)
  {
    fprintf(stderr,"Error: Failed to open input data file %s.",dataFileName);
    exit(1);
  }

  setvbuf(inFile, file_buf, _IOFBF, FILE_BUF_SIZE);

  if(0 != fseek( inFile, 0, SEEK_END))
  {
    fprintf(stderr,"Error: Failed to discover input data file size.");
  }

  if(0 != fseek(inFile, 0, SEEK_SET))
  {
    fprintf(stderr,"Error: Failed to discover input data file size.");
    exit(1);
  }

  if(page_size > 256)
  {
    fprintf(stderr,"Error: page sizes greater than 256 bytes are unsupported (found %d bytes).", page_size);
    exit(1);
  }

  flash_write_enable(flash_handle);
  flash_erase_chip(flash_handle);
  wait_while_busy(flash_handle);

  readBuffer = (unsigned char*)malloc(page_size);
  checkBuffer = (unsigned char*)malloc(page_size);

  if(!readBuffer || !checkBuffer)
  {
    fprintf(stderr,"Error: allocating buffer memory failed.");
    exit(1);
  }

  unsigned int pageAddress = 0;
  int lastPage = 0;
  //Only update the user when we have written a sector!
  unsigned int update_output = page_size;
  const unsigned int update_output_at = page_size * 16;
  while(!lastPage)
  {
    int i;

    lastPage = readPage(page_size, readBuffer, inFile);
    for(i = 0; i < page_size; i++)
    {
      checkBuffer[i] = 0;
    }

    if(update_output == update_output_at)
    {
      sendProgress(cProgress,3);
      sendProgress(cProgress,pageAddress);
      ackProgress(cProgress);
    }

    programAndCheckPage(flash_handle, page_size, pageAddress, readBuffer, checkBuffer);

    if(update_output == update_output_at)
    {
      sendProgress(cProgress,4);
      sendProgress(cProgress,pageAddress);
      ackProgress(cProgress);
      update_output = page_size;
    }

    pageAddress += page_size;
    update_output += page_size;
  }

  fclose(move(inFile));
  inFile = NULL;
  free(readBuffer);

  return(0);
}

int main()
{
  chan backFrom[1];
  par
  {
    on tile[0]:
    {
      unsigned int siteStatus[1];
      unsigned int siteDatum[1];
      unsigned int isOkay = 1;
      unsigned int respCount = 0;
      unsigned int thisNodeIsWorking=0;
      unsigned int lastLength=0;
      for( int i=0; i<1; i++ )
      {
        siteStatus[i]=0;
      }
      while( respCount < 1 )
      {
        unsigned int status;
        unsigned int srcSite;
        unsigned int isChanged = 0;
        select
        {
        case backFrom[0] :> status:
          srcSite = 0;
          break;
        }
        switch( status )
        {
        default:
          isOkay = 0;
          break;
        case 1:
        {
          siteStatus[srcSite] = 1;
          isChanged = 1;
          break;
        }
        case 3:
        {
          unsigned int value;
          backFrom[srcSite] :> value;
          if(srcSite==0) { thisNodeIsWorking=1; }
          siteStatus[srcSite] = 3;
          if( 0==(value&0x3ff) )
          {
          siteDatum[srcSite] = value;
          isChanged = 1;
          }
          break;
        }
        case 4:
        {
          unsigned int value;
          if(srcSite==0) { thisNodeIsWorking=0; }
          backFrom[srcSite] :> value;
          siteStatus[srcSite] = 4;
          if( 0==(value&0x3ff) )
          {
          siteDatum[srcSite] = value;
          isChanged = 1;
          }
          break;
        }
        case 5:
        {
          unsigned int value;
          backFrom[srcSite] :> value;
          isOkay &= (value==0);
          respCount++;
          isChanged = 1;
          siteStatus[srcSite] = 5;
          siteDatum[srcSite] = value;
          break;
        }
        }
        if( isChanged )
        {
          unsigned int thisLength=0;
          thisLength += printf("\r");
          for( int i=0; i<1; i++ )
          {
            thisLength += printf("Site %d ",i);
            switch(siteStatus[i])
            {
            case 1:
              thisLength += printf("has started.         ");
              break;
            case 3:
              thisLength += printf("write    0x%08x. ",siteDatum[i]);
              break;
            case 4:
              thisLength += printf("verified 0x%08x. ",siteDatum[i]);
              break;
            case 5:
              thisLength += printf("has finished successfully.        ");
              break;
            }
          }
          while( thisLength < lastLength )
          {
            thisLength += printf(" ");
          }
          lastLength = thisLength;
        }
        backFrom[srcSite] <: 0;
      }
      printf("\n");
      if( !isOkay )
      {
        exit(1);
      }
      for( int i=0; i<1; i++ )
      {
        backFrom[i] <: 0;
      }
      exit(0);
    }

    on tile[0]:
    {
      unsigned int page_size = 256;
      flash_handle_t flash_handle;
      flash_connect(&flash_handle, &flash_ports_0, flash_clock_config, flash_qe_config_0);
      enable_quad_mode(&flash_handle, flash_qe_config_0);
      int res = DoProgram(&flash_handle, page_size, backFrom[0], "flash_bin_node0" );
      flash_disconnect(&flash_handle);
      backFrom[0] <: 5;
      backFrom[0] <: res;
      backFrom[0] :> res;
      backFrom[0] :> res;
    }

    on tile[1]:
    {
      while(1) {}
    }

  }

  return(0);
}
